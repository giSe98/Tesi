/* midori-core.h generated by valac 0.40.23, the Vala compiler, do not modify */


#ifndef __MIDORI_CORE_H__
#define __MIDORI_CORE_H__

#include <glib.h>
#include <libpeas/peas.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <glib-object.h>
#include "webkit2/webkit2.h"
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <sqlite3.h>
#include <cairo.h>

G_BEGIN_DECLS


#define MIDORI_TYPE_APP_ACTIVATABLE (midori_app_activatable_get_type ())
#define MIDORI_APP_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_APP_ACTIVATABLE, MidoriAppActivatable))
#define MIDORI_IS_APP_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_APP_ACTIVATABLE))
#define MIDORI_APP_ACTIVATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_APP_ACTIVATABLE, MidoriAppActivatableIface))

typedef struct _MidoriAppActivatable MidoriAppActivatable;
typedef struct _MidoriAppActivatableIface MidoriAppActivatableIface;

#define MIDORI_TYPE_APP (midori_app_get_type ())
#define MIDORI_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_APP, MidoriApp))
#define MIDORI_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_APP, MidoriAppClass))
#define MIDORI_IS_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_APP))
#define MIDORI_IS_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_APP))
#define MIDORI_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_APP, MidoriAppClass))

typedef struct _MidoriApp MidoriApp;
typedef struct _MidoriAppClass MidoriAppClass;
typedef struct _MidoriAppPrivate MidoriAppPrivate;

#define MIDORI_TYPE_BROWSER_ACTIVATABLE (midori_browser_activatable_get_type ())
#define MIDORI_BROWSER_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_BROWSER_ACTIVATABLE, MidoriBrowserActivatable))
#define MIDORI_IS_BROWSER_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_BROWSER_ACTIVATABLE))
#define MIDORI_BROWSER_ACTIVATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_BROWSER_ACTIVATABLE, MidoriBrowserActivatableIface))

typedef struct _MidoriBrowserActivatable MidoriBrowserActivatable;
typedef struct _MidoriBrowserActivatableIface MidoriBrowserActivatableIface;

#define MIDORI_TYPE_BROWSER (midori_browser_get_type ())
#define MIDORI_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_BROWSER, MidoriBrowser))
#define MIDORI_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_BROWSER, MidoriBrowserClass))
#define MIDORI_IS_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_BROWSER))
#define MIDORI_IS_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_BROWSER))
#define MIDORI_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_BROWSER, MidoriBrowserClass))

typedef struct _MidoriBrowser MidoriBrowser;
typedef struct _MidoriBrowserClass MidoriBrowserClass;
typedef struct _MidoriBrowserPrivate MidoriBrowserPrivate;

#define MIDORI_TYPE_STATUSBAR (midori_statusbar_get_type ())
#define MIDORI_STATUSBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_STATUSBAR, MidoriStatusbar))
#define MIDORI_STATUSBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_STATUSBAR, MidoriStatusbarClass))
#define MIDORI_IS_STATUSBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_STATUSBAR))
#define MIDORI_IS_STATUSBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_STATUSBAR))
#define MIDORI_STATUSBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_STATUSBAR, MidoriStatusbarClass))

typedef struct _MidoriStatusbar MidoriStatusbar;
typedef struct _MidoriStatusbarClass MidoriStatusbarClass;

#define MIDORI_TYPE_TAB (midori_tab_get_type ())
#define MIDORI_TAB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_TAB, MidoriTab))
#define MIDORI_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_TAB, MidoriTabClass))
#define MIDORI_IS_TAB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_TAB))
#define MIDORI_IS_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_TAB))
#define MIDORI_TAB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_TAB, MidoriTabClass))

typedef struct _MidoriTab MidoriTab;
typedef struct _MidoriTabClass MidoriTabClass;

#define MIDORI_TYPE_CLEAR_PRIVATE_DATA_ACTIVATABLE (midori_clear_private_data_activatable_get_type ())
#define MIDORI_CLEAR_PRIVATE_DATA_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_CLEAR_PRIVATE_DATA_ACTIVATABLE, MidoriClearPrivateDataActivatable))
#define MIDORI_IS_CLEAR_PRIVATE_DATA_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_CLEAR_PRIVATE_DATA_ACTIVATABLE))
#define MIDORI_CLEAR_PRIVATE_DATA_ACTIVATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_CLEAR_PRIVATE_DATA_ACTIVATABLE, MidoriClearPrivateDataActivatableIface))

typedef struct _MidoriClearPrivateDataActivatable MidoriClearPrivateDataActivatable;
typedef struct _MidoriClearPrivateDataActivatableIface MidoriClearPrivateDataActivatableIface;

#define MIDORI_TYPE_CLEAR_PRIVATE_DATA (midori_clear_private_data_get_type ())
#define MIDORI_CLEAR_PRIVATE_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_CLEAR_PRIVATE_DATA, MidoriClearPrivateData))
#define MIDORI_CLEAR_PRIVATE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_CLEAR_PRIVATE_DATA, MidoriClearPrivateDataClass))
#define MIDORI_IS_CLEAR_PRIVATE_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_CLEAR_PRIVATE_DATA))
#define MIDORI_IS_CLEAR_PRIVATE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_CLEAR_PRIVATE_DATA))
#define MIDORI_CLEAR_PRIVATE_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_CLEAR_PRIVATE_DATA, MidoriClearPrivateDataClass))

typedef struct _MidoriClearPrivateData MidoriClearPrivateData;
typedef struct _MidoriClearPrivateDataClass MidoriClearPrivateDataClass;
typedef struct _MidoriClearPrivateDataPrivate MidoriClearPrivateDataPrivate;

#define MIDORI_TYPE_DATABASE_ITEM (midori_database_item_get_type ())
#define MIDORI_DATABASE_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DATABASE_ITEM, MidoriDatabaseItem))
#define MIDORI_DATABASE_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DATABASE_ITEM, MidoriDatabaseItemClass))
#define MIDORI_IS_DATABASE_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DATABASE_ITEM))
#define MIDORI_IS_DATABASE_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DATABASE_ITEM))
#define MIDORI_DATABASE_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DATABASE_ITEM, MidoriDatabaseItemClass))

typedef struct _MidoriDatabaseItem MidoriDatabaseItem;
typedef struct _MidoriDatabaseItemClass MidoriDatabaseItemClass;
typedef struct _MidoriDatabaseItemPrivate MidoriDatabaseItemPrivate;

#define MIDORI_TYPE_SUGGESTION_ITEM (midori_suggestion_item_get_type ())
#define MIDORI_SUGGESTION_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SUGGESTION_ITEM, MidoriSuggestionItem))
#define MIDORI_SUGGESTION_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SUGGESTION_ITEM, MidoriSuggestionItemClass))
#define MIDORI_IS_SUGGESTION_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SUGGESTION_ITEM))
#define MIDORI_IS_SUGGESTION_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SUGGESTION_ITEM))
#define MIDORI_SUGGESTION_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SUGGESTION_ITEM, MidoriSuggestionItemClass))

typedef struct _MidoriSuggestionItem MidoriSuggestionItem;
typedef struct _MidoriSuggestionItemClass MidoriSuggestionItemClass;
typedef struct _MidoriSuggestionItemPrivate MidoriSuggestionItemPrivate;

#define MIDORI_TYPE_COMPLETION_ACTIVATABLE (midori_completion_activatable_get_type ())
#define MIDORI_COMPLETION_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_COMPLETION_ACTIVATABLE, MidoriCompletionActivatable))
#define MIDORI_IS_COMPLETION_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_COMPLETION_ACTIVATABLE))
#define MIDORI_COMPLETION_ACTIVATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_COMPLETION_ACTIVATABLE, MidoriCompletionActivatableIface))

typedef struct _MidoriCompletionActivatable MidoriCompletionActivatable;
typedef struct _MidoriCompletionActivatableIface MidoriCompletionActivatableIface;

#define MIDORI_TYPE_COMPLETION (midori_completion_get_type ())
#define MIDORI_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_COMPLETION, MidoriCompletion))
#define MIDORI_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_COMPLETION, MidoriCompletionClass))
#define MIDORI_IS_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_COMPLETION))
#define MIDORI_IS_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_COMPLETION))
#define MIDORI_COMPLETION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_COMPLETION, MidoriCompletionClass))

typedef struct _MidoriCompletion MidoriCompletion;
typedef struct _MidoriCompletionClass MidoriCompletionClass;
typedef struct _MidoriCompletionPrivate MidoriCompletionPrivate;
typedef gboolean (*MidoriDatabaseCallback) (gpointer user_data, GError** error);

#define MIDORI_TYPE_DATABASE_STATEMENT (midori_database_statement_get_type ())
#define MIDORI_DATABASE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DATABASE_STATEMENT, MidoriDatabaseStatement))
#define MIDORI_DATABASE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DATABASE_STATEMENT, MidoriDatabaseStatementClass))
#define MIDORI_IS_DATABASE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DATABASE_STATEMENT))
#define MIDORI_IS_DATABASE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DATABASE_STATEMENT))
#define MIDORI_DATABASE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DATABASE_STATEMENT, MidoriDatabaseStatementClass))

typedef struct _MidoriDatabaseStatement MidoriDatabaseStatement;
typedef struct _MidoriDatabaseStatementClass MidoriDatabaseStatementClass;
typedef struct _MidoriDatabaseStatementPrivate MidoriDatabaseStatementPrivate;

#define MIDORI_TYPE_DATABASE (midori_database_get_type ())
#define MIDORI_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DATABASE, MidoriDatabase))
#define MIDORI_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DATABASE, MidoriDatabaseClass))
#define MIDORI_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DATABASE))
#define MIDORI_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DATABASE))
#define MIDORI_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DATABASE, MidoriDatabaseClass))

typedef struct _MidoriDatabase MidoriDatabase;
typedef struct _MidoriDatabaseClass MidoriDatabaseClass;

#define MIDORI_TYPE_LOGGABLE (midori_loggable_get_type ())
#define MIDORI_LOGGABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_LOGGABLE, MidoriLoggable))
#define MIDORI_IS_LOGGABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_LOGGABLE))
#define MIDORI_LOGGABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_LOGGABLE, MidoriLoggableIface))

typedef struct _MidoriLoggable MidoriLoggable;
typedef struct _MidoriLoggableIface MidoriLoggableIface;
typedef struct _MidoriDatabasePrivate MidoriDatabasePrivate;

#define MIDORI_TYPE_DOWNLOAD_BUTTON (midori_download_button_get_type ())
#define MIDORI_DOWNLOAD_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DOWNLOAD_BUTTON, MidoriDownloadButton))
#define MIDORI_DOWNLOAD_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DOWNLOAD_BUTTON, MidoriDownloadButtonClass))
#define MIDORI_IS_DOWNLOAD_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DOWNLOAD_BUTTON))
#define MIDORI_IS_DOWNLOAD_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DOWNLOAD_BUTTON))
#define MIDORI_DOWNLOAD_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DOWNLOAD_BUTTON, MidoriDownloadButtonClass))

typedef struct _MidoriDownloadButton MidoriDownloadButton;
typedef struct _MidoriDownloadButtonClass MidoriDownloadButtonClass;
typedef struct _MidoriDownloadButtonPrivate MidoriDownloadButtonPrivate;

#define MIDORI_TYPE_DOWNLOAD_ITEM (midori_download_item_get_type ())
#define MIDORI_DOWNLOAD_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DOWNLOAD_ITEM, MidoriDownloadItem))
#define MIDORI_DOWNLOAD_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DOWNLOAD_ITEM, MidoriDownloadItemClass))
#define MIDORI_IS_DOWNLOAD_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DOWNLOAD_ITEM))
#define MIDORI_IS_DOWNLOAD_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DOWNLOAD_ITEM))
#define MIDORI_DOWNLOAD_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DOWNLOAD_ITEM, MidoriDownloadItemClass))

typedef struct _MidoriDownloadItem MidoriDownloadItem;
typedef struct _MidoriDownloadItemClass MidoriDownloadItemClass;
typedef struct _MidoriDownloadItemPrivate MidoriDownloadItemPrivate;

#define MIDORI_TYPE_DOWNLOAD_ROW (midori_download_row_get_type ())
#define MIDORI_DOWNLOAD_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DOWNLOAD_ROW, MidoriDownloadRow))
#define MIDORI_DOWNLOAD_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DOWNLOAD_ROW, MidoriDownloadRowClass))
#define MIDORI_IS_DOWNLOAD_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DOWNLOAD_ROW))
#define MIDORI_IS_DOWNLOAD_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DOWNLOAD_ROW))
#define MIDORI_DOWNLOAD_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DOWNLOAD_ROW, MidoriDownloadRowClass))

typedef struct _MidoriDownloadRow MidoriDownloadRow;
typedef struct _MidoriDownloadRowClass MidoriDownloadRowClass;
typedef struct _MidoriDownloadRowPrivate MidoriDownloadRowPrivate;

#define MIDORI_TYPE_FAVICON (midori_favicon_get_type ())
#define MIDORI_FAVICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_FAVICON, MidoriFavicon))
#define MIDORI_FAVICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_FAVICON, MidoriFaviconClass))
#define MIDORI_IS_FAVICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_FAVICON))
#define MIDORI_IS_FAVICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_FAVICON))
#define MIDORI_FAVICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_FAVICON, MidoriFaviconClass))

typedef struct _MidoriFavicon MidoriFavicon;
typedef struct _MidoriFaviconClass MidoriFaviconClass;
typedef struct _MidoriFaviconPrivate MidoriFaviconPrivate;

#define MIDORI_TYPE_HISTORY_DATABASE (midori_history_database_get_type ())
#define MIDORI_HISTORY_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_HISTORY_DATABASE, MidoriHistoryDatabase))
#define MIDORI_HISTORY_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_HISTORY_DATABASE, MidoriHistoryDatabaseClass))
#define MIDORI_IS_HISTORY_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_HISTORY_DATABASE))
#define MIDORI_IS_HISTORY_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_HISTORY_DATABASE))
#define MIDORI_HISTORY_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_HISTORY_DATABASE, MidoriHistoryDatabaseClass))

typedef struct _MidoriHistoryDatabase MidoriHistoryDatabase;
typedef struct _MidoriHistoryDatabaseClass MidoriHistoryDatabaseClass;
typedef struct _MidoriHistoryDatabasePrivate MidoriHistoryDatabasePrivate;
typedef enum  {
	MIDORI_DEBUG_FLAGS_NONE,
	MIDORI_DEBUG_FLAGS_HISTORY
} MidoriDebugFlags;


#define MIDORI_TYPE_DEBUG_FLAGS (midori_debug_flags_get_type ())

#define MIDORI_TYPE_NAVIGATIONBAR (midori_navigationbar_get_type ())
#define MIDORI_NAVIGATIONBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_NAVIGATIONBAR, MidoriNavigationbar))
#define MIDORI_NAVIGATIONBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_NAVIGATIONBAR, MidoriNavigationbarClass))
#define MIDORI_IS_NAVIGATIONBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_NAVIGATIONBAR))
#define MIDORI_IS_NAVIGATIONBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_NAVIGATIONBAR))
#define MIDORI_NAVIGATIONBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_NAVIGATIONBAR, MidoriNavigationbarClass))

typedef struct _MidoriNavigationbar MidoriNavigationbar;
typedef struct _MidoriNavigationbarClass MidoriNavigationbarClass;
typedef struct _MidoriNavigationbarPrivate MidoriNavigationbarPrivate;

#define MIDORI_TYPE_URLBAR (midori_urlbar_get_type ())
#define MIDORI_URLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_URLBAR, MidoriUrlbar))
#define MIDORI_URLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_URLBAR, MidoriUrlbarClass))
#define MIDORI_IS_URLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_URLBAR))
#define MIDORI_IS_URLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_URLBAR))
#define MIDORI_URLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_URLBAR, MidoriUrlbarClass))

typedef struct _MidoriUrlbar MidoriUrlbar;
typedef struct _MidoriUrlbarClass MidoriUrlbarClass;

#define MIDORI_TYPE_NETWORK_CHECK (midori_network_check_get_type ())
#define MIDORI_NETWORK_CHECK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_NETWORK_CHECK, MidoriNetworkCheck))
#define MIDORI_NETWORK_CHECK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_NETWORK_CHECK, MidoriNetworkCheckClass))
#define MIDORI_IS_NETWORK_CHECK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_NETWORK_CHECK))
#define MIDORI_IS_NETWORK_CHECK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_NETWORK_CHECK))
#define MIDORI_NETWORK_CHECK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_NETWORK_CHECK, MidoriNetworkCheckClass))

typedef struct _MidoriNetworkCheck MidoriNetworkCheck;
typedef struct _MidoriNetworkCheckClass MidoriNetworkCheckClass;
typedef struct _MidoriNetworkCheckPrivate MidoriNetworkCheckPrivate;

#define MIDORI_TYPE_PLUGINS (midori_plugins_get_type ())
#define MIDORI_PLUGINS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_PLUGINS, MidoriPlugins))
#define MIDORI_PLUGINS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_PLUGINS, MidoriPluginsClass))
#define MIDORI_IS_PLUGINS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_PLUGINS))
#define MIDORI_IS_PLUGINS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_PLUGINS))
#define MIDORI_PLUGINS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_PLUGINS, MidoriPluginsClass))

typedef struct _MidoriPlugins MidoriPlugins;
typedef struct _MidoriPluginsClass MidoriPluginsClass;
typedef struct _MidoriPluginsPrivate MidoriPluginsPrivate;

#define MIDORI_TYPE_PREFERENCES_ACTIVATABLE (midori_preferences_activatable_get_type ())
#define MIDORI_PREFERENCES_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_PREFERENCES_ACTIVATABLE, MidoriPreferencesActivatable))
#define MIDORI_IS_PREFERENCES_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_PREFERENCES_ACTIVATABLE))
#define MIDORI_PREFERENCES_ACTIVATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_PREFERENCES_ACTIVATABLE, MidoriPreferencesActivatableIface))

typedef struct _MidoriPreferencesActivatable MidoriPreferencesActivatable;
typedef struct _MidoriPreferencesActivatableIface MidoriPreferencesActivatableIface;

#define MIDORI_TYPE_PREFERENCES (midori_preferences_get_type ())
#define MIDORI_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_PREFERENCES, MidoriPreferences))
#define MIDORI_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_PREFERENCES, MidoriPreferencesClass))
#define MIDORI_IS_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_PREFERENCES))
#define MIDORI_IS_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_PREFERENCES))
#define MIDORI_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_PREFERENCES, MidoriPreferencesClass))

typedef struct _MidoriPreferences MidoriPreferences;
typedef struct _MidoriPreferencesClass MidoriPreferencesClass;

#define MIDORI_TYPE_LABEL_WIDGET (midori_label_widget_get_type ())
#define MIDORI_LABEL_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_LABEL_WIDGET, MidoriLabelWidget))
#define MIDORI_LABEL_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_LABEL_WIDGET, MidoriLabelWidgetClass))
#define MIDORI_IS_LABEL_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_LABEL_WIDGET))
#define MIDORI_IS_LABEL_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_LABEL_WIDGET))
#define MIDORI_LABEL_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_LABEL_WIDGET, MidoriLabelWidgetClass))

typedef struct _MidoriLabelWidget MidoriLabelWidget;
typedef struct _MidoriLabelWidgetClass MidoriLabelWidgetClass;
typedef struct _MidoriLabelWidgetPrivate MidoriLabelWidgetPrivate;
typedef struct _MidoriPreferencesPrivate MidoriPreferencesPrivate;
typedef enum  {
	MIDORI_STARTUP_SPEED_DIAL,
	MIDORI_STARTUP_HOMEPAGE,
	MIDORI_STARTUP_LAST_OPEN_PAGES,
	MIDORI_STARTUP_DELAYED_PAGES
} MidoriStartupType;


#define MIDORI_TYPE_STARTUP_TYPE (midori_startup_type_get_type ())
typedef enum  {
	MIDORI_PROXY_AUTOMATIC,
	MIDORI_PROXY_HTTP,
	MIDORI_PROXY_NONE
} MidoriProxyType;


#define MIDORI_TYPE_PROXY_TYPE (midori_proxy_type_get_type ())

#define MIDORI_TYPE_SETTINGS (midori_settings_get_type ())
#define MIDORI_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SETTINGS, MidoriSettings))
#define MIDORI_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SETTINGS, MidoriSettingsClass))
#define MIDORI_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SETTINGS))
#define MIDORI_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SETTINGS))
#define MIDORI_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SETTINGS, MidoriSettingsClass))

typedef struct _MidoriSettings MidoriSettings;
typedef struct _MidoriSettingsClass MidoriSettingsClass;
typedef struct _MidoriSettingsPrivate MidoriSettingsPrivate;

#define MIDORI_TYPE_CORE_SETTINGS (midori_core_settings_get_type ())
#define MIDORI_CORE_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_CORE_SETTINGS, MidoriCoreSettings))
#define MIDORI_CORE_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_CORE_SETTINGS, MidoriCoreSettingsClass))
#define MIDORI_IS_CORE_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_CORE_SETTINGS))
#define MIDORI_IS_CORE_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_CORE_SETTINGS))
#define MIDORI_CORE_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_CORE_SETTINGS, MidoriCoreSettingsClass))

typedef struct _MidoriCoreSettings MidoriCoreSettings;
typedef struct _MidoriCoreSettingsClass MidoriCoreSettingsClass;
typedef struct _MidoriCoreSettingsPrivate MidoriCoreSettingsPrivate;
typedef struct _MidoriStatusbarPrivate MidoriStatusbarPrivate;

#define MIDORI_TYPE_SUGGESTION_ROW (midori_suggestion_row_get_type ())
#define MIDORI_SUGGESTION_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SUGGESTION_ROW, MidoriSuggestionRow))
#define MIDORI_SUGGESTION_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SUGGESTION_ROW, MidoriSuggestionRowClass))
#define MIDORI_IS_SUGGESTION_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SUGGESTION_ROW))
#define MIDORI_IS_SUGGESTION_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SUGGESTION_ROW))
#define MIDORI_SUGGESTION_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SUGGESTION_ROW, MidoriSuggestionRowClass))

typedef struct _MidoriSuggestionRow MidoriSuggestionRow;
typedef struct _MidoriSuggestionRowClass MidoriSuggestionRowClass;
typedef struct _MidoriSuggestionRowPrivate MidoriSuggestionRowPrivate;

#define MIDORI_TYPE_SWITCHER (midori_switcher_get_type ())
#define MIDORI_SWITCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SWITCHER, MidoriSwitcher))
#define MIDORI_SWITCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SWITCHER, MidoriSwitcherClass))
#define MIDORI_IS_SWITCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SWITCHER))
#define MIDORI_IS_SWITCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SWITCHER))
#define MIDORI_SWITCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SWITCHER, MidoriSwitcherClass))

typedef struct _MidoriSwitcher MidoriSwitcher;
typedef struct _MidoriSwitcherClass MidoriSwitcherClass;
typedef struct _MidoriSwitcherPrivate MidoriSwitcherPrivate;

#define MIDORI_TYPE_TAB_ACTIVATABLE (midori_tab_activatable_get_type ())
#define MIDORI_TAB_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_TAB_ACTIVATABLE, MidoriTabActivatable))
#define MIDORI_IS_TAB_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_TAB_ACTIVATABLE))
#define MIDORI_TAB_ACTIVATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_TAB_ACTIVATABLE, MidoriTabActivatableIface))

typedef struct _MidoriTabActivatable MidoriTabActivatable;
typedef struct _MidoriTabActivatableIface MidoriTabActivatableIface;
typedef struct _MidoriTabPrivate MidoriTabPrivate;

#define MIDORI_TYPE_TALLY (midori_tally_get_type ())
#define MIDORI_TALLY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_TALLY, MidoriTally))
#define MIDORI_TALLY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_TALLY, MidoriTallyClass))
#define MIDORI_IS_TALLY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_TALLY))
#define MIDORI_IS_TALLY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_TALLY))
#define MIDORI_TALLY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_TALLY, MidoriTallyClass))

typedef struct _MidoriTally MidoriTally;
typedef struct _MidoriTallyClass MidoriTallyClass;
typedef struct _MidoriTallyPrivate MidoriTallyPrivate;
typedef struct _MidoriUrlbarPrivate MidoriUrlbarPrivate;

struct _MidoriAppActivatableIface {
	GTypeInterface parent_iface;
	void (*activate) (MidoriAppActivatable* self);
	MidoriApp* (*get_app) (MidoriAppActivatable* self);
	void (*set_app) (MidoriAppActivatable* self, MidoriApp* value);
};

struct _MidoriApp {
	GtkApplication parent_instance;
	MidoriAppPrivate * priv;
};

struct _MidoriAppClass {
	GtkApplicationClass parent_class;
};

struct _MidoriBrowserActivatableIface {
	GTypeInterface parent_iface;
	void (*activate) (MidoriBrowserActivatable* self);
	MidoriBrowser* (*get_browser) (MidoriBrowserActivatable* self);
	void (*set_browser) (MidoriBrowserActivatable* self, MidoriBrowser* value);
};

struct _MidoriBrowser {
	GtkApplicationWindow parent_instance;
	MidoriBrowserPrivate * priv;
	GtkStack* tabs;
	GtkOverlay* overlay;
	MidoriStatusbar* statusbar;
};

struct _MidoriBrowserClass {
	GtkApplicationWindowClass parent_class;
};

struct _MidoriClearPrivateDataActivatableIface {
	GTypeInterface parent_iface;
	void (*activate) (MidoriClearPrivateDataActivatable* self);
	void (*clear) (MidoriClearPrivateDataActivatable* self, GTimeSpan timespan, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*clear_finish) (MidoriClearPrivateDataActivatable* self, GAsyncResult* _res_);
	GtkBox* (*get_box) (MidoriClearPrivateDataActivatable* self);
	void (*set_box) (MidoriClearPrivateDataActivatable* self, GtkBox* value);
};

struct _MidoriClearPrivateData {
	GtkDialog parent_instance;
	MidoriClearPrivateDataPrivate * priv;
};

struct _MidoriClearPrivateDataClass {
	GtkDialogClass parent_class;
};

struct _MidoriDatabaseItem {
	GObject parent_instance;
	MidoriDatabaseItemPrivate * priv;
};

struct _MidoriDatabaseItemClass {
	GObjectClass parent_class;
};

struct _MidoriSuggestionItem {
	MidoriDatabaseItem parent_instance;
	MidoriSuggestionItemPrivate * priv;
};

struct _MidoriSuggestionItemClass {
	MidoriDatabaseItemClass parent_class;
};

struct _MidoriCompletionActivatableIface {
	GTypeInterface parent_iface;
	void (*activate) (MidoriCompletionActivatable* self);
	MidoriCompletion* (*get_completion) (MidoriCompletionActivatable* self);
	void (*set_completion) (MidoriCompletionActivatable* self, MidoriCompletion* value);
};

struct _MidoriCompletion {
	GObject parent_instance;
	MidoriCompletionPrivate * priv;
};

struct _MidoriCompletionClass {
	GObjectClass parent_class;
};

typedef enum  {
	MIDORI_DATABASE_ERROR_OPEN,
	MIDORI_DATABASE_ERROR_NAMING,
	MIDORI_DATABASE_ERROR_FILENAME,
	MIDORI_DATABASE_ERROR_EXECUTE,
	MIDORI_DATABASE_ERROR_COMPILE,
	MIDORI_DATABASE_ERROR_TYPE
} MidoriDatabaseError;
#define MIDORI_DATABASE_ERROR midori_database_error_quark ()
struct _MidoriDatabaseStatement {
	GObject parent_instance;
	MidoriDatabaseStatementPrivate * priv;
};

struct _MidoriDatabaseStatementClass {
	GObjectClass parent_class;
	gboolean (*init) (MidoriDatabaseStatement* self, GCancellable* cancellable, GError** error);
};

struct _MidoriLoggableIface {
	GTypeInterface parent_iface;
};

struct _MidoriDatabase {
	GObject parent_instance;
	MidoriDatabasePrivate * priv;
	sqlite3* db;
};

struct _MidoriDatabaseClass {
	GObjectClass parent_class;
	gboolean (*init) (MidoriDatabase* self, GCancellable* cancellable, GError** error);
	void (*delete) (MidoriDatabase* self, MidoriDatabaseItem* item, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*delete_finish) (MidoriDatabase* self, GAsyncResult* _res_, GError** error);
	void (*lookup) (MidoriDatabase* self, const gchar* uri, GAsyncReadyCallback _callback_, gpointer _user_data_);
	MidoriDatabaseItem* (*lookup_finish) (MidoriDatabase* self, GAsyncResult* _res_, GError** error);
	void (*query) (MidoriDatabase* self, const gchar* filter, gint64 max_items, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GList* (*query_finish) (MidoriDatabase* self, GAsyncResult* _res_, GError** error);
	void (*update) (MidoriDatabase* self, MidoriDatabaseItem* item, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*update_finish) (MidoriDatabase* self, GAsyncResult* _res_, GError** error);
	void (*insert) (MidoriDatabase* self, MidoriDatabaseItem* item, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*insert_finish) (MidoriDatabase* self, GAsyncResult* _res_, GError** error);
	void (*clear) (MidoriDatabase* self, GTimeSpan timespan, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*clear_finish) (MidoriDatabase* self, GAsyncResult* _res_, GError** error);
};

struct _MidoriDownloadButton {
	GtkButton parent_instance;
	MidoriDownloadButtonPrivate * priv;
	GtkPopover* popover;
	GtkButton* clear;
	GtkListBox* listbox;
};

struct _MidoriDownloadButtonClass {
	GtkButtonClass parent_class;
	void (*show_downloads) (MidoriDownloadButton* self);
};

struct _MidoriDownloadItem {
	GObject parent_instance;
	MidoriDownloadItemPrivate * priv;
	gchar* mime_type;
};

struct _MidoriDownloadItemClass {
	GObjectClass parent_class;
};

struct _MidoriDownloadRow {
	GtkListBoxRow parent_instance;
	MidoriDownloadRowPrivate * priv;
	GtkImage* icon;
	GtkLabel* filename;
	GtkProgressBar* progress;
	GtkButton* cancel;
	GtkButton* open;
	GtkImage* error;
	GtkLabel* status;
};

struct _MidoriDownloadRowClass {
	GtkListBoxRowClass parent_class;
};

struct _MidoriFavicon {
	GtkImage parent_instance;
	MidoriFaviconPrivate * priv;
};

struct _MidoriFaviconClass {
	GtkImageClass parent_class;
};

struct _MidoriHistoryDatabase {
	MidoriDatabase parent_instance;
	MidoriHistoryDatabasePrivate * priv;
};

struct _MidoriHistoryDatabaseClass {
	MidoriDatabaseClass parent_class;
};

struct _MidoriNavigationbar {
	GtkActionBar parent_instance;
	MidoriNavigationbarPrivate * priv;
	GtkBox* actionbox;
	GtkButton* go_back;
	GtkButton* go_forward;
	GtkButton* reload;
	GtkButton* stop_loading;
	GtkButton* homepage;
	MidoriUrlbar* urlbar;
	GtkButton* restore;
};

struct _MidoriNavigationbarClass {
	GtkActionBarClass parent_class;
};

struct _MidoriNetworkCheck {
	GtkActionBar parent_instance;
	MidoriNetworkCheckPrivate * priv;
};

struct _MidoriNetworkCheckClass {
	GtkActionBarClass parent_class;
};

struct _MidoriPlugins {
	PeasEngine parent_instance;
	MidoriPluginsPrivate * priv;
};

struct _MidoriPluginsClass {
	PeasEngineClass parent_class;
};

struct _MidoriPreferencesActivatableIface {
	GTypeInterface parent_iface;
	void (*activate) (MidoriPreferencesActivatable* self);
	MidoriPreferences* (*get_preferences) (MidoriPreferencesActivatable* self);
	void (*set_preferences) (MidoriPreferencesActivatable* self, MidoriPreferences* value);
};

struct _MidoriLabelWidget {
	GtkBox parent_instance;
	MidoriLabelWidgetPrivate * priv;
};

struct _MidoriLabelWidgetClass {
	GtkBoxClass parent_class;
};

struct _MidoriPreferences {
	GtkDialog parent_instance;
	MidoriPreferencesPrivate * priv;
};

struct _MidoriPreferencesClass {
	GtkDialogClass parent_class;
};

struct _MidoriSettings {
	GObject parent_instance;
	MidoriSettingsPrivate * priv;
};

struct _MidoriSettingsClass {
	GObjectClass parent_class;
};

struct _MidoriCoreSettings {
	MidoriSettings parent_instance;
	MidoriCoreSettingsPrivate * priv;
};

struct _MidoriCoreSettingsClass {
	MidoriSettingsClass parent_class;
};

struct _MidoriStatusbar {
	GtkStatusbar parent_instance;
	MidoriStatusbarPrivate * priv;
	gboolean has_children;
};

struct _MidoriStatusbarClass {
	GtkStatusbarClass parent_class;
};

struct _MidoriSuggestionRow {
	GtkListBoxRow parent_instance;
	MidoriSuggestionRowPrivate * priv;
};

struct _MidoriSuggestionRowClass {
	GtkListBoxRowClass parent_class;
};

struct _MidoriSwitcher {
	GtkBox parent_instance;
	MidoriSwitcherPrivate * priv;
};

struct _MidoriSwitcherClass {
	GtkBoxClass parent_class;
};

struct _MidoriTabActivatableIface {
	GTypeInterface parent_iface;
	void (*activate) (MidoriTabActivatable* self);
	MidoriTab* (*get_tab) (MidoriTabActivatable* self);
	void (*set_tab) (MidoriTabActivatable* self, MidoriTab* value);
};

struct _MidoriTab {
	WebKitWebView parent_instance;
	MidoriTabPrivate * priv;
	GtkPopover* popover;
};

struct _MidoriTabClass {
	WebKitWebViewClass parent_class;
};

struct _MidoriTally {
	GtkEventBox parent_instance;
	MidoriTallyPrivate * priv;
};

struct _MidoriTallyClass {
	GtkEventBoxClass parent_class;
};

struct _MidoriUrlbar {
	GtkEntry parent_instance;
	MidoriUrlbarPrivate * priv;
};

struct _MidoriUrlbarClass {
	GtkEntryClass parent_class;
};


GType midori_app_get_type (void) G_GNUC_CONST;
GType midori_app_activatable_get_type (void) G_GNUC_CONST;
void midori_app_activatable_activate (MidoriAppActivatable* self);
MidoriApp* midori_app_activatable_get_app (MidoriAppActivatable* self);
void midori_app_activatable_set_app (MidoriAppActivatable* self,
                                     MidoriApp* value);
MidoriApp* midori_app_new (void);
MidoriApp* midori_app_construct (GType object_type);
GFile* midori_app_get_exec_path (MidoriApp* self);
void midori_app_set_exec_path (MidoriApp* self,
                               GFile* value);
GType midori_browser_get_type (void) G_GNUC_CONST;
GType midori_browser_activatable_get_type (void) G_GNUC_CONST;
void midori_browser_activatable_activate (MidoriBrowserActivatable* self);
MidoriBrowser* midori_browser_activatable_get_browser (MidoriBrowserActivatable* self);
void midori_browser_activatable_set_browser (MidoriBrowserActivatable* self,
                                             MidoriBrowser* value);
GType midori_statusbar_get_type (void) G_GNUC_CONST;
void midori_browser_add_button (MidoriBrowser* self,
                                GtkButton* button);
void midori_browser_add_panel (MidoriBrowser* self,
                               GtkWidget* widget);
MidoriBrowser* midori_browser_new (MidoriApp* app,
                                   gboolean is_locked);
MidoriBrowser* midori_browser_construct (GType object_type,
                                         MidoriApp* app,
                                         gboolean is_locked);
MidoriBrowser* midori_browser_new_incognito (MidoriApp* app);
MidoriBrowser* midori_browser_construct_incognito (GType object_type,
                                                   MidoriApp* app);
gboolean midori_browser_activated (MidoriBrowser* self);
GType midori_tab_get_type (void) G_GNUC_CONST;
void midori_browser_add (MidoriBrowser* self,
                         MidoriTab* tab);
WebKitWebContext* midori_browser_get_web_context (MidoriBrowser* self);
void midori_browser_set_web_context (MidoriBrowser* self,
                                     WebKitWebContext* value);
gboolean midori_browser_get_is_loading (MidoriBrowser* self);
void midori_browser_set_is_loading (MidoriBrowser* self,
                                    gboolean value);
const gchar* midori_browser_get_uri (MidoriBrowser* self);
void midori_browser_set_uri (MidoriBrowser* self,
                             const gchar* value);
MidoriTab* midori_browser_get_tab (MidoriBrowser* self);
void midori_browser_set_tab (MidoriBrowser* self,
                             MidoriTab* value);
GListStore* midori_browser_get_trash (MidoriBrowser* self);
void midori_browser_set_trash (MidoriBrowser* self,
                               GListStore* value);
gboolean midori_browser_get_is_fullscreen (MidoriBrowser* self);
void midori_browser_set_is_fullscreen (MidoriBrowser* self,
                                       gboolean value);
gboolean midori_browser_get_is_locked (MidoriBrowser* self);
void midori_browser_set_is_locked (MidoriBrowser* self,
                                   gboolean value);
GType midori_clear_private_data_activatable_get_type (void) G_GNUC_CONST;
void midori_clear_private_data_activatable_activate (MidoriClearPrivateDataActivatable* self);
void midori_clear_private_data_activatable_clear (MidoriClearPrivateDataActivatable* self,
                                                  GTimeSpan timespan,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_);
void midori_clear_private_data_activatable_clear_finish (MidoriClearPrivateDataActivatable* self,
                                                         GAsyncResult* _res_);
GtkBox* midori_clear_private_data_activatable_get_box (MidoriClearPrivateDataActivatable* self);
void midori_clear_private_data_activatable_set_box (MidoriClearPrivateDataActivatable* self,
                                                    GtkBox* value);
GType midori_clear_private_data_get_type (void) G_GNUC_CONST;
MidoriClearPrivateData* midori_clear_private_data_new (GtkWindow* parent);
MidoriClearPrivateData* midori_clear_private_data_construct (GType object_type,
                                                             GtkWindow* parent);
GType midori_database_item_get_type (void) G_GNUC_CONST;
GType midori_suggestion_item_get_type (void) G_GNUC_CONST;
MidoriSuggestionItem* midori_suggestion_item_new_for_input (const gchar* uri,
                                                            const gchar* title);
MidoriSuggestionItem* midori_suggestion_item_construct_for_input (GType object_type,
                                                                  const gchar* uri,
                                                                  const gchar* title);
const gchar* midori_suggestion_item_get_search (MidoriSuggestionItem* self);
void midori_suggestion_item_set_search (MidoriSuggestionItem* self,
                                        const gchar* value);
GType midori_completion_get_type (void) G_GNUC_CONST;
GType midori_completion_activatable_get_type (void) G_GNUC_CONST;
void midori_completion_activatable_activate (MidoriCompletionActivatable* self);
MidoriCompletion* midori_completion_activatable_get_completion (MidoriCompletionActivatable* self);
void midori_completion_activatable_set_completion (MidoriCompletionActivatable* self,
                                                   MidoriCompletion* value);
MidoriCompletion* midori_completion_new (gboolean incognito);
MidoriCompletion* midori_completion_construct (GType object_type,
                                               gboolean incognito);
void midori_completion_add (MidoriCompletion* self,
                            GListModel* model);
gboolean midori_completion_get_incognito (MidoriCompletion* self);
void midori_completion_set_incognito (MidoriCompletion* self,
                                      gboolean value);
const gchar* midori_completion_get_key (MidoriCompletion* self);
void midori_completion_set_key (MidoriCompletion* self,
                                const gchar* value);
GQuark midori_database_error_quark (void);
GType midori_database_statement_get_type (void) G_GNUC_CONST;
GType midori_database_get_type (void) G_GNUC_CONST;
MidoriDatabaseStatement* midori_database_statement_new (MidoriDatabase* database,
                                                        const gchar* query,
                                                        GError** error);
MidoriDatabaseStatement* midori_database_statement_construct (GType object_type,
                                                              MidoriDatabase* database,
                                                              const gchar* query,
                                                              GError** error);
gboolean midori_database_statement_init (MidoriDatabaseStatement* self,
                                         GCancellable* cancellable,
                                         GError** error);
void midori_database_statement_bind (MidoriDatabaseStatement* self,
                                     const gchar* pname,
                                     GError** error,
                                     ...);
gboolean midori_database_statement_exec (MidoriDatabaseStatement* self,
                                         GError** error);
gboolean midori_database_statement_step (MidoriDatabaseStatement* self,
                                         GError** error);
gint64 midori_database_statement_row_id (MidoriDatabaseStatement* self,
                                         GError** error);
gchar* midori_database_statement_get_string (MidoriDatabaseStatement* self,
                                             const gchar* name,
                                             GError** error);
gint64 midori_database_statement_get_int64 (MidoriDatabaseStatement* self,
                                            const gchar* name,
                                            GError** error);
gdouble midori_database_statement_get_double (MidoriDatabaseStatement* self,
                                              const gchar* name,
                                              GError** error);
MidoriDatabase* midori_database_statement_get_database (MidoriDatabaseStatement* self);
void midori_database_statement_set_database (MidoriDatabaseStatement* self,
                                             MidoriDatabase* value);
const gchar* midori_database_statement_get_query (MidoriDatabaseStatement* self);
void midori_database_statement_set_query (MidoriDatabaseStatement* self,
                                          const gchar* value);
MidoriDatabaseItem* midori_database_item_new (const gchar* uri,
                                              const gchar* title,
                                              gint64 date);
MidoriDatabaseItem* midori_database_item_construct (GType object_type,
                                                    const gchar* uri,
                                                    const gchar* title,
                                                    gint64 date);
void midori_database_item_delete (MidoriDatabaseItem* self,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
gboolean midori_database_item_delete_finish (MidoriDatabaseItem* self,
                                             GAsyncResult* _res_);
MidoriDatabase* midori_database_item_get_database (MidoriDatabaseItem* self);
void midori_database_item_set_database (MidoriDatabaseItem* self,
                                        MidoriDatabase* value);
gint64 midori_database_item_get_id (MidoriDatabaseItem* self);
void midori_database_item_set_id (MidoriDatabaseItem* self,
                                  gint64 value);
const gchar* midori_database_item_get_uri (MidoriDatabaseItem* self);
void midori_database_item_set_uri (MidoriDatabaseItem* self,
                                   const gchar* value);
const gchar* midori_database_item_get_title (MidoriDatabaseItem* self);
void midori_database_item_set_title (MidoriDatabaseItem* self,
                                     const gchar* value);
gint64 midori_database_item_get_date (MidoriDatabaseItem* self);
void midori_database_item_set_date (MidoriDatabaseItem* self,
                                    gint64 value);
GType midori_loggable_get_type (void) G_GNUC_CONST;
MidoriDatabase* midori_database_new (const gchar* path,
                                     GError** error);
MidoriDatabase* midori_database_construct (GType object_type,
                                           const gchar* path,
                                           GError** error);
gboolean midori_database_init (MidoriDatabase* self,
                               GCancellable* cancellable,
                               GError** error);
gboolean midori_database_exists (MidoriDatabase* self,
                                 const gchar* path);
gboolean midori_database_exec_script (MidoriDatabase* self,
                                      const gchar* filename,
                                      GError** error);
gboolean midori_database_transaction (MidoriDatabase* self,
                                      MidoriDatabaseCallback callback,
                                      gpointer callback_target,
                                      GError** error);
gboolean midori_database_exec (MidoriDatabase* self,
                               const gchar* query,
                               GError** error);
MidoriDatabaseStatement* midori_database_prepare (MidoriDatabase* self,
                                                  const gchar* query,
                                                  GError** error,
                                                  ...);
void midori_database_delete (MidoriDatabase* self,
                             MidoriDatabaseItem* item,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_);
gboolean midori_database_delete_finish (MidoriDatabase* self,
                                        GAsyncResult* _res_,
                                        GError** error);
void midori_database_lookup (MidoriDatabase* self,
                             const gchar* uri,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_);
MidoriDatabaseItem* midori_database_lookup_finish (MidoriDatabase* self,
                                                   GAsyncResult* _res_,
                                                   GError** error);
gboolean midori_database_contains (MidoriDatabase* self,
                                   MidoriDatabaseItem* item,
                                   GError** error);
void midori_database_query (MidoriDatabase* self,
                            const gchar* filter,
                            gint64 max_items,
                            GCancellable* cancellable,
                            GAsyncReadyCallback _callback_,
                            gpointer _user_data_);
GList* midori_database_query_finish (MidoriDatabase* self,
                                     GAsyncResult* _res_,
                                     GError** error);
void midori_database_update (MidoriDatabase* self,
                             MidoriDatabaseItem* item,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_);
gboolean midori_database_update_finish (MidoriDatabase* self,
                                        GAsyncResult* _res_,
                                        GError** error);
void midori_database_insert (MidoriDatabase* self,
                             MidoriDatabaseItem* item,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_);
gboolean midori_database_insert_finish (MidoriDatabase* self,
                                        GAsyncResult* _res_,
                                        GError** error);
void midori_database_clear (MidoriDatabase* self,
                            GTimeSpan timespan,
                            GAsyncReadyCallback _callback_,
                            gpointer _user_data_);
gboolean midori_database_clear_finish (MidoriDatabase* self,
                                       GAsyncResult* _res_,
                                       GError** error);
const gchar* midori_database_get_table (MidoriDatabase* self);
void midori_database_set_table (MidoriDatabase* self,
                                const gchar* value);
const gchar* midori_database_get_path (MidoriDatabase* self);
void midori_database_set_path (MidoriDatabase* self,
                               const gchar* value);
const gchar* midori_database_get_key (MidoriDatabase* self);
void midori_database_set_key (MidoriDatabase* self,
                              const gchar* value);
gboolean midori_database_get_readonly (MidoriDatabase* self);
void midori_database_set_readonly (MidoriDatabase* self,
                                   gboolean value);
gboolean midori_database_get_first_use (MidoriDatabase* self);
void midori_database_set_first_use (MidoriDatabase* self,
                                    gboolean value);
gint64 midori_database_get_last_row_id (MidoriDatabase* self);
const gchar* midori_database_get_errmsg (MidoriDatabase* self);
GType midori_download_button_get_type (void) G_GNUC_CONST;
GtkWidget* midori_download_button_create_row (MidoriDownloadButton* self,
                                              GObject* item);
MidoriDownloadButton* midori_download_button_new (void);
MidoriDownloadButton* midori_download_button_construct (GType object_type);
GType midori_download_item_get_type (void) G_GNUC_CONST;
void midori_download_item_cancel (MidoriDownloadItem* self);
MidoriDownloadItem* midori_download_item_new (const gchar* filename);
MidoriDownloadItem* midori_download_item_construct (GType object_type,
                                                    const gchar* filename);
MidoriDownloadItem* midori_download_item_new_with_download (WebKitDownload* download);
MidoriDownloadItem* midori_download_item_construct_with_download (GType object_type,
                                                                  WebKitDownload* download);
gchar* midori_download_item_get_content_type (MidoriDownloadItem* self);
GIcon* midori_download_item_get_icon (MidoriDownloadItem* self);
const gchar* midori_download_item_get_filename (MidoriDownloadItem* self);
void midori_download_item_set_filename (MidoriDownloadItem* self,
                                        const gchar* value);
const gchar* midori_download_item_get_basename (MidoriDownloadItem* self);
void midori_download_item_set_basename (MidoriDownloadItem* self,
                                        const gchar* value);
gdouble midori_download_item_get_progress (MidoriDownloadItem* self);
void midori_download_item_set_progress (MidoriDownloadItem* self,
                                        gdouble value);
WebKitDownload* midori_download_item_get_download (MidoriDownloadItem* self);
void midori_download_item_set_download (MidoriDownloadItem* self,
                                        WebKitDownload* value);
gboolean midori_download_item_get_loading (MidoriDownloadItem* self);
void midori_download_item_set_loading (MidoriDownloadItem* self,
                                       gboolean value);
const gchar* midori_download_item_get_error (MidoriDownloadItem* self);
void midori_download_item_set_error (MidoriDownloadItem* self,
                                     const gchar* value);
GType midori_download_row_get_type (void) G_GNUC_CONST;
MidoriDownloadRow* midori_download_row_new (MidoriDownloadItem* item);
MidoriDownloadRow* midori_download_row_construct (GType object_type,
                                                  MidoriDownloadItem* item);
MidoriDownloadItem* midori_download_row_get_item (MidoriDownloadRow* self);
void midori_download_row_set_item (MidoriDownloadRow* self,
                                   MidoriDownloadItem* value);
GType midori_favicon_get_type (void) G_GNUC_CONST;
MidoriFavicon* midori_favicon_new (void);
MidoriFavicon* midori_favicon_construct (GType object_type);
void midori_favicon_set_surface (MidoriFavicon* self,
                                 cairo_surface_t* value);
const gchar* midori_favicon_get_uri (MidoriFavicon* self);
void midori_favicon_set_uri (MidoriFavicon* self,
                             const gchar* value);
GType midori_history_database_get_type (void) G_GNUC_CONST;
MidoriHistoryDatabase* midori_history_database_get_default (gboolean incognito,
                                                            GError** error);
GType midori_debug_flags_get_type (void) G_GNUC_CONST;
void midori_loggable_debug (MidoriLoggable* self,
                            const gchar* format,
                            ...);
gchar* midori_loggable_get_domain (MidoriLoggable* self);
gboolean midori_loggable_get_logging (MidoriLoggable* self);
GType midori_navigationbar_get_type (void) G_GNUC_CONST;
GType midori_urlbar_get_type (void) G_GNUC_CONST;
MidoriNavigationbar* midori_navigationbar_new (void);
MidoriNavigationbar* midori_navigationbar_construct (GType object_type);
GType midori_network_check_get_type (void) G_GNUC_CONST;
MidoriNetworkCheck* midori_network_check_new (void);
MidoriNetworkCheck* midori_network_check_construct (GType object_type);
GType midori_plugins_get_type (void) G_GNUC_CONST;
PeasExtensionSet* midori_plugins_plug (MidoriPlugins* self,
                                       GType t_type,
                                       GBoxedCopyFunc t_dup_func,
                                       GDestroyNotify t_destroy_func,
                                       const gchar* name,
                                       GObject* object);
const gchar* midori_plugins_get_builtin_path (MidoriPlugins* self);
void midori_plugins_set_builtin_path (MidoriPlugins* self,
                                      const gchar* value);
GType midori_preferences_get_type (void) G_GNUC_CONST;
GType midori_preferences_activatable_get_type (void) G_GNUC_CONST;
void midori_preferences_activatable_activate (MidoriPreferencesActivatable* self);
MidoriPreferences* midori_preferences_activatable_get_preferences (MidoriPreferencesActivatable* self);
void midori_preferences_activatable_set_preferences (MidoriPreferencesActivatable* self,
                                                     MidoriPreferences* value);
GType midori_label_widget_get_type (void) G_GNUC_CONST;
MidoriLabelWidget* midori_label_widget_new (const gchar* title,
                                            GtkWidget* widget);
MidoriLabelWidget* midori_label_widget_construct (GType object_type,
                                                  const gchar* title,
                                                  GtkWidget* widget);
const gchar* midori_label_widget_get_title (MidoriLabelWidget* self);
void midori_label_widget_set_title (MidoriLabelWidget* self,
                                    const gchar* value);
GtkLabel* midori_label_widget_get_label (MidoriLabelWidget* self);
void midori_label_widget_set_label (MidoriLabelWidget* self,
                                    GtkLabel* value);
GtkWidget* midori_label_widget_get_widget (MidoriLabelWidget* self);
void midori_label_widget_set_widget (MidoriLabelWidget* self,
                                     GtkWidget* value);
MidoriPreferences* midori_preferences_new (GtkWindow* parent);
MidoriPreferences* midori_preferences_construct (GType object_type,
                                                 GtkWindow* parent);
void midori_preferences_add (MidoriPreferences* self,
                             const gchar* label,
                             GtkWidget* widget);
GType midori_startup_type_get_type (void) G_GNUC_CONST;
GType midori_proxy_type_get_type (void) G_GNUC_CONST;
GType midori_settings_get_type (void) G_GNUC_CONST;
GType midori_core_settings_get_type (void) G_GNUC_CONST;
MidoriCoreSettings* midori_core_settings_get_default (void);
gboolean midori_core_settings_get_plugin_enabled (MidoriCoreSettings* self,
                                                  const gchar* plugin);
void midori_core_settings_set_plugin_enabled (MidoriCoreSettings* self,
                                              const gchar* plugin,
                                              gboolean enabled);
gchar* midori_core_settings_uri_for_search (MidoriCoreSettings* self,
                                            const gchar* keywords,
                                            const gchar* search);
gint midori_core_settings_get_last_window_width (MidoriCoreSettings* self);
void midori_core_settings_set_last_window_width (MidoriCoreSettings* self,
                                                 gint value);
gint midori_core_settings_get_last_window_height (MidoriCoreSettings* self);
void midori_core_settings_set_last_window_height (MidoriCoreSettings* self,
                                                  gint value);
MidoriStartupType midori_core_settings_get_load_on_startup (MidoriCoreSettings* self);
void midori_core_settings_set_load_on_startup (MidoriCoreSettings* self,
                                               MidoriStartupType value);
gboolean midori_core_settings_get_enable_spell_checking (MidoriCoreSettings* self);
void midori_core_settings_set_enable_spell_checking (MidoriCoreSettings* self,
                                                     gboolean value);
gboolean midori_core_settings_get_auto_load_images (MidoriCoreSettings* self);
void midori_core_settings_set_auto_load_images (MidoriCoreSettings* self,
                                                gboolean value);
gboolean midori_core_settings_get_enable_javascript (MidoriCoreSettings* self);
void midori_core_settings_set_enable_javascript (MidoriCoreSettings* self,
                                                 gboolean value);
gboolean midori_core_settings_get_enable_plugins (MidoriCoreSettings* self);
void midori_core_settings_set_enable_plugins (MidoriCoreSettings* self,
                                              gboolean value);
gboolean midori_core_settings_get_enable_caret_browsing (MidoriCoreSettings* self);
void midori_core_settings_set_enable_caret_browsing (MidoriCoreSettings* self,
                                                     gboolean value);
gboolean midori_core_settings_get_close_buttons_on_tabs (MidoriCoreSettings* self);
void midori_core_settings_set_close_buttons_on_tabs (MidoriCoreSettings* self,
                                                     gboolean value);
gchar* midori_core_settings_get_location_entry_search (MidoriCoreSettings* self);
void midori_core_settings_set_location_entry_search (MidoriCoreSettings* self,
                                                     const gchar* value);
gchar* midori_core_settings_get_homepage (MidoriCoreSettings* self);
void midori_core_settings_set_homepage (MidoriCoreSettings* self,
                                        const gchar* value);
MidoriProxyType midori_core_settings_get_proxy_type (MidoriCoreSettings* self);
void midori_core_settings_set_proxy_type (MidoriCoreSettings* self,
                                          MidoriProxyType value);
gchar* midori_core_settings_get_http_proxy (MidoriCoreSettings* self);
void midori_core_settings_set_http_proxy (MidoriCoreSettings* self,
                                          const gchar* value);
gint midori_core_settings_get_http_proxy_port (MidoriCoreSettings* self);
void midori_core_settings_set_http_proxy_port (MidoriCoreSettings* self,
                                               gint value);
gboolean midori_core_settings_get_first_party_cookies_only (MidoriCoreSettings* self);
void midori_core_settings_set_first_party_cookies_only (MidoriCoreSettings* self,
                                                        gboolean value);
gint midori_core_settings_get_maximum_history_age (MidoriCoreSettings* self);
void midori_core_settings_set_maximum_history_age (MidoriCoreSettings* self,
                                                   gint value);
void midori_settings_set_boolean (MidoriSettings* self,
                                  const gchar* group,
                                  const gchar* key,
                                  gboolean value,
                                  gboolean _default_);
gboolean midori_settings_get_boolean (MidoriSettings* self,
                                      const gchar* group,
                                      const gchar* key,
                                      gboolean _default_);
void midori_settings_set_string (MidoriSettings* self,
                                 const gchar* group,
                                 const gchar* key,
                                 const gchar* value,
                                 const gchar* _default_);
gchar* midori_settings_get_string (MidoriSettings* self,
                                   const gchar* group,
                                   const gchar* key,
                                   const gchar* _default_);
MidoriSettings* midori_settings_new (void);
MidoriSettings* midori_settings_construct (GType object_type);
const gchar* midori_settings_get_filename (MidoriSettings* self);
void midori_settings_set_filename (MidoriSettings* self,
                                   const gchar* value);
MidoriStatusbar* midori_statusbar_new (void);
MidoriStatusbar* midori_statusbar_construct (GType object_type);
const gchar* midori_statusbar_get_label (MidoriStatusbar* self);
void midori_statusbar_set_label (MidoriStatusbar* self,
                                 const gchar* value);
GType midori_suggestion_row_get_type (void) G_GNUC_CONST;
MidoriSuggestionRow* midori_suggestion_row_new (MidoriDatabaseItem* item);
MidoriSuggestionRow* midori_suggestion_row_construct (GType object_type,
                                                      MidoriDatabaseItem* item);
MidoriDatabaseItem* midori_suggestion_row_get_item (MidoriSuggestionRow* self);
void midori_suggestion_row_set_item (MidoriSuggestionRow* self,
                                     MidoriDatabaseItem* value);
const gchar* midori_suggestion_row_get_location (MidoriSuggestionRow* self);
void midori_suggestion_row_set_location (MidoriSuggestionRow* self,
                                         const gchar* value);
GRegex* midori_suggestion_row_get_regex (MidoriSuggestionRow* self);
void midori_suggestion_row_set_regex (MidoriSuggestionRow* self,
                                      GRegex* value);
const gchar* midori_suggestion_row_get_key (MidoriSuggestionRow* self);
void midori_suggestion_row_set_key (MidoriSuggestionRow* self,
                                    const gchar* value);
GType midori_switcher_get_type (void) G_GNUC_CONST;
MidoriSwitcher* midori_switcher_new (void);
MidoriSwitcher* midori_switcher_construct (GType object_type);
GtkStack* midori_switcher_get_stack (MidoriSwitcher* self);
void midori_switcher_set_stack (MidoriSwitcher* self,
                                GtkStack* value);
gboolean midori_switcher_get_show_close_buttons (MidoriSwitcher* self);
void midori_switcher_set_show_close_buttons (MidoriSwitcher* self,
                                             gboolean value);
GType midori_tab_activatable_get_type (void) G_GNUC_CONST;
void midori_tab_activatable_activate (MidoriTabActivatable* self);
MidoriTab* midori_tab_activatable_get_tab (MidoriTabActivatable* self);
void midori_tab_activatable_set_tab (MidoriTabActivatable* self,
                                     MidoriTab* value);
MidoriTab* midori_tab_new (MidoriTab* related,
                           WebKitWebContext* web_context,
                           const gchar* uri,
                           const gchar* title);
MidoriTab* midori_tab_construct (GType object_type,
                                 MidoriTab* related,
                                 WebKitWebContext* web_context,
                                 const gchar* uri,
                                 const gchar* title);
gchar* midori_tab_get_id (MidoriTab* self);
gdouble midori_tab_get_progress (MidoriTab* self);
void midori_tab_set_progress (MidoriTab* self,
                              gdouble value);
gboolean midori_tab_get_can_go_back (MidoriTab* self);
void midori_tab_set_can_go_back (MidoriTab* self,
                                 gboolean value);
gboolean midori_tab_get_can_go_forward (MidoriTab* self);
void midori_tab_set_can_go_forward (MidoriTab* self,
                                    gboolean value);
MidoriDatabaseItem* midori_tab_get_item (MidoriTab* self);
void midori_tab_set_item (MidoriTab* self,
                          MidoriDatabaseItem* value);
const gchar* midori_tab_get_display_uri (MidoriTab* self);
void midori_tab_set_display_uri (MidoriTab* self,
                                 const gchar* value);
const gchar* midori_tab_get_display_title (MidoriTab* self);
void midori_tab_set_display_title (MidoriTab* self,
                                   const gchar* value);
const gchar* midori_tab_get_color (MidoriTab* self);
void midori_tab_set_color (MidoriTab* self,
                           const gchar* value);
gboolean midori_tab_get_pinned (MidoriTab* self);
void midori_tab_set_pinned (MidoriTab* self,
                            gboolean value);
gboolean midori_tab_get_secure (MidoriTab* self);
void midori_tab_set_secure (MidoriTab* self,
                            gboolean value);
const gchar* midori_tab_get_link_uri (MidoriTab* self);
void midori_tab_set_link_uri (MidoriTab* self,
                              const gchar* value);
GType midori_tally_get_type (void) G_GNUC_CONST;
MidoriTally* midori_tally_new (MidoriTab* tab);
MidoriTally* midori_tally_construct (GType object_type,
                                     MidoriTab* tab);
MidoriTab* midori_tally_get_tab (MidoriTally* self);
void midori_tally_set_tab (MidoriTally* self,
                           MidoriTab* value);
const gchar* midori_tally_get_uri (MidoriTally* self);
void midori_tally_set_uri (MidoriTally* self,
                           const gchar* value);
const gchar* midori_tally_get_title (MidoriTally* self);
void midori_tally_set_title (MidoriTally* self,
                             const gchar* value);
gboolean midori_tally_get_show_close (MidoriTally* self);
void midori_tally_set_show_close (MidoriTally* self,
                                  gboolean value);
gboolean midori_tally_get_active (MidoriTally* self);
void midori_tally_set_active (MidoriTally* self,
                              gboolean value);
GtkWidget* midori_urlbar_create_row (MidoriUrlbar* self,
                                     GObject* item);
void midori_urlbar_popdown (MidoriUrlbar* self);
MidoriUrlbar* midori_urlbar_new (void);
MidoriUrlbar* midori_urlbar_construct (GType object_type);
const gchar* midori_urlbar_get_key (MidoriUrlbar* self);
void midori_urlbar_set_key (MidoriUrlbar* self,
                            const gchar* value);
GRegex* midori_urlbar_get_regex (MidoriUrlbar* self);
void midori_urlbar_set_regex (MidoriUrlbar* self,
                              GRegex* value);
const gchar* midori_urlbar_get_location (MidoriUrlbar* self);
void midori_urlbar_set_location (MidoriUrlbar* self,
                                 const gchar* value);
const gchar* midori_urlbar_get_uri (MidoriUrlbar* self);
void midori_urlbar_set_uri (MidoriUrlbar* self,
                            const gchar* value);
gboolean midori_urlbar_get_secure (MidoriUrlbar* self);
void midori_urlbar_set_secure (MidoriUrlbar* self,
                               gboolean value);

extern const GDebugKey MIDORI_keys[1];

G_END_DECLS

#endif
